<?php

namespace PiggyBox\ShopBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends EntityRepository
{
    public function findAllByShopAndCategory($shop_id, $category_id)
    {
        return $this->getEntityManager()
            ->createQuery('SELECT p, m, d FROM PiggyBoxShopBundle:Product p LEFT JOIN p.menuItems m LEFT JOIN p.discount d WHERE (p.shop=:shop_id AND p.category=:category_id AND p.active=1) ORDER BY p.discount DESC')
            ->setParameters(array(
                'shop_id' => $shop_id,
                'category_id' => $category_id,
                ))
            ->getResult();
    }

    public function findByActiveProduct($shop_id)
    {
        return $this->getEntityManager()
            ->createQuery('SELECT p, m, d FROM PiggyBoxShopBundle:Product p LEFT JOIN p.menuItems m LEFT JOIN p.discount d WHERE (p.shop=:shop_id AND p.active=1) ORDER BY p.discount DESC')
            ->setParameter('shop_id', $shop_id)
            ->getResult();
    }

    public function findOneByShopAndProductSlug($shop_id, $product_slug)
    {
        return $this->getEntityManager()
            ->createQuery('SELECT p, c FROM PiggyBoxShopBundle:Product p  LEFT JOIN p.category c WHERE (p.shop=:shop_id AND p.slug=:product_slug AND p.active=1)')
            ->setParameters(array(
                'shop_id' => $shop_id,
                'product_slug' => $product_slug,
                ))
            ->getSingleResult();
    }

    public function findBySimilarProductByShopAndByCategory($shop_id, $product_id, $category_id)
    {
        return $this->getEntityManager()
            ->createQuery('SELECT p, s FROM PiggyBoxShopBundle:Product p LEFT JOIN p.sales s WHERE (p.category=:category_id AND p.shop=:shop_id AND NOT p.id=:product_id AND p.active=1) ORDER BY s.sales_nbr DESC')
            ->setParameters(array(
                'shop_id' => $shop_id,
                'category_id' => $category_id,
                'product_id' => $product_id,
                ))
            ->setMaxResults(3)
            ->getResult();
    }

    public function findByShopExcludeByCategory($shop_id, $category_id)
    {
        return $this->getEntityManager()
            ->createQuery('SELECT p, s FROM PiggyBoxShopBundle:Product p LEFT JOIN p.sales s WHERE (p.shop=:shop_id AND NOT p.category=:category_id AND p.active=1) ORDER BY s.sales_nbr DESC')
            ->setParameters(array(
                'shop_id' => $shop_id,
                'category_id' => $category_id,
                ))
            ->setMaxResults(3)
            ->getResult();
    }

    public function findByShopAndMenu($shop_id, $menuItem_id)
    {
        return $this->getEntityManager()
            ->createQuery('SELECT DISTINCT p, i FROM PiggyBoxShopBundle:Product p LEFT JOIN p.menuItems i WHERE (p.shop=shop_id AND i.id=menuItem_id)')
            ->setParameters(array(
                'shop_id' => $shop_id,
                'menuItem_id' => $menuItem_id,
                ))
            ->getResult();
    }
}
